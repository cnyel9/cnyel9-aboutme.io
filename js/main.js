let body = document.getElementById('body')
let nav = document.getElementById('nav')
let navTitle = document.getElementById('nav-title')
let modeColor = document.getElementById('mode-color')
let from = document.getElementById('from')
let subjectform = document.getElementById('subject')
let message = document.getElementById('message')
let checkbox = document.getElementById('checkbox')
let revolist = document.getElementById('revolist')
let backtop_ = document.getElementById('back-top')
let igalret = document.getElementById('ig-alret')
let igalret2 = document.getElementById('ig-alret-2')
let revoLoader = document.getElementById('revo-loader');let content = "";for (var i = 0; i < data_title.length; i++) { content += ``;revoLoader.innerHTML = content; };function colorMode() { checkbox.click() };checkbox.addEventListener('change', function() { if (checkbox.checked == true) { toggles();localStorage.setItem('mode', 'dark') } else { toggles();localStorage.setItem('mode', 'white') } });var mode = localStorage.getItem('mode');if (mode == 'dark') { checkbox.click() } else {};function toggles() {checkbox.click();body.classList.toggle('bg-dragv');body.classList.toggle('text-gray-100');modeColor.classList.toggle('bg-yellow-600');from.classList.toggle('!bg-gray-900');subjectform.classList.toggle('!bg-gray-900');message.classList.toggle('!bg-gray-900');revolist.classList.toggle('dark');backtop_.classList.toggle('!bg-white');backtop_.classList.toggle('!stroke-dragv');backtop_.classList.toggle('!border-dragv');backtop_.classList.toggle('!outline-white');igalret.classList.toggle('!text-gray-900');igalret2.classList.toggle('!text-gray-900')}
let loaders = document.getElementById('loader');
const imgg = document.querySelectorAll('.imgg')
const toleft = document.querySelectorAll('.to-left')
const toright = document.querySelectorAll('.to-right')
const backtop = document.querySelectorAll('.back-top')
const observer = new IntersectionObserver(entries => { entries.forEach(entry => { entry.target.classList.toggle('up', entry.isIntersecting); if (entry.isIntersecting) observer.unobserve(entry.target) }) }, { threshold: 0, })
const observerii = new IntersectionObserver(entries => { entries.forEach(entry => { entry.target.classList.toggle('c', entry.isIntersecting) }) }, { threshold: 0, })
const observeriii = new IntersectionObserver(entries => { entries.forEach(entry => { entry.target.classList.toggle('pop', entry.isIntersecting) }) }, { threshold: 0, });imgg.forEach(imgg => { observer.observe(imgg) });toleft.forEach(toleft => { observerii.observe(toleft) });toright.forEach(toright => { observerii.observe(toright) });backtop.forEach(backtop => { observeriii.observe(backtop) })
window.addEventListener('load', function(){loaders.classList.add('done');body.classList.remove('fixed')})
